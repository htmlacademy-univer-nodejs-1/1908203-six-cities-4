openapi: 3.1.0
info:
  title: API сервер для демо-проекта «Шесть городов».
  description: |-
    * Список ресурсов и маршрутов сервера «Шесть городов».
  version: 2.0.0
tags:
  - name: offers
    description: Действия с объявлениями.
  - name: comments
    description: Действия с комментариями.
  - name: users
    description: Действия с пользователем.

paths:
  /offers:
    get:
      summary: Список предложений по аренде
      tags:
        - offers
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 60
            maximum: 100
      responses:
        '200':
          description: Список предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferShort'
    post:
      summary: Создание нового предложения
      tags:
        - offers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Offer'
      responses:
        '201':
          description: Успешное создание предложения
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '400':
          description: Ошибка валидации

  /offers/{offerId}:
    parameters:
      - name: offerId
        required: true
        in: path
        schema:
          type: string
    get:
      summary: Получение детализированного предложения
      tags:
        - offers
      responses:
        '200':
          description: Детализированное предложение
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
    put:
      summary: Редактирование предложения
      tags:
        - offers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOffer'
      responses:
        '200':
          description: Обновлённое предложение
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Offer'
        '403':
          description: Недостаточно прав
        '400':
          description: Ошибка валидации

    delete:
      summary: Удаление предложения
      tags:
        - offers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Успешное удаление
        '403':
          description: Недостаточно прав

  /comments/{offerId}/:
    parameters:
    - name: offerId
      required: true
      in: path
      schema:
        type: string
    get:
      summary: Список комментариев к предложению
      tags:
        - comments
      responses:
        '200':
          description: Комментарии
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'

  /comments/:
    post:
      summary: Добавление комментария
      tags:
        - comments
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentInput'
      responses:
        '200':
          description: Комментарий создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Ошибка валидации

  /users:
    post:
      summary: Создание нового пользователя
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/login:
    post:
      summary: Вход в систему
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Неверные данные

  /users/status:
    get:
      summary: Проверка состояния пользователя
      tags:
        - users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Авторизованный пользователь
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string

  /offers/premium/{city}:
    get:
      summary: Премиальные предложения для города
      tags:
        - offers
      parameters:
        - name: city
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Список премиальных предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferShort'

  /favorites:
    get:
      summary: Получение списка избранных предложений
      tags:
        - offers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список избранного
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfferShort'

  /offers/{offerId}/favorite:
    parameters:
    - name: offerId
      required: true
      in: path
      schema:
        type: string
    post:
      summary: Добавление предложения в избранное
      tags:
        - offers
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Добавлено в избранное

    delete:
      summary: Удаление предложения из избранного
      tags:
        - offers
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Удалено из избранного

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CommentInput:
      type: object
      properties:
        text:
          type: string
        offerId:
          type: string
        rating:
          type: number
          minimum: 1
          maximum: 5

    Comment:
      allOf:
        - $ref: '#/components/schemas/CommentInput'
        - type: object
          properties:
            id:
              type: string
            user:
              type: string
            date:
              type: string
              format: date-time
    Coordinates:
      type: object
      properties:
        latitude:
          type: number
        longitude:
          type: number
      required:
        - latitude
        - longitude

    City:
      type: string
      enum:
        - Paris
        - Cologne
        - Brussels
        - Amsterdam
        - Hamburg
        - Dusseldorf

    Convenience:
      type: string
      enum:
        - Breakfast
        - Air conditioning
        - Laptop friendly workspace
        - Baby seat
        - Washer
        - Towels
        - Fridge

    OfferType:
      type: string
      enum:
        - apartment
        - house
        - room
        - hotel

    UserType:
      type: string
      enum:
        - "обычный"
        - pro

    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        avatarPath:
          type: string
          nullable: true
        type:
          $ref: '#/components/schemas/UserType'
      required:
        - name
        - email
        - type

    OfferShort:
      type: object
      properties:
        id:
          type: string
        price:
          type: number
        title:
          type: string
        type:
          $ref: '#/components/schemas/OfferType'
        isFavorite:
          type: boolean
        postDate:
          type: string
          format: date-time
        city:
          $ref: '#/components/schemas/City'
        image:
          type: string
        isPremium:
          type: boolean
        rating:
          type: number
        commentsCount:
          type: integer
      required:
        - id
        - price
        - title
        - type
        - isFavorite
        - postDate
        - city
        - image
        - isPremium
        - rating
        - commentsCount

    Offer:
      allOf:
        - $ref: '#/components/schemas/OfferShort'
        - type: object
          properties:
            description:
              type: string
            images:
              type: array
              items:
                type: string
            conveniences:
              type: array
              items:
                $ref: '#/components/schemas/Convenience'
            rooms:
              type: integer
            guests:
              type: integer
            user:
              $ref: '#/components/schemas/User'
            latitude:
              type: number
            longitude:
              type: number
          required:
            - description
            - images
            - conveniences
            - rooms
            - guests
            - user
            - latitude
            - longitude
    UpdateOffer:
      allOf:
          - $ref: '#/components/schemas/Offer'
          - type: object
            properties:
              id:
                readOnly: true
            not:
              required: ["id"]

